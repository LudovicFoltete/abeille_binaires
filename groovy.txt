/*
 * Copyright 2022 Ludovic Foltete. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovy.transform.CompileStatic
import java.util.regex.Matcher
import java.util.regex.Pattern

/**
 * A class that sorts software versions.
 *
 * Example :
 * List<String> versions = ['MEP-2022-10-02', '1.2.3', '1.5.1_beta', '1.10.2', '2.0',
 *                          'MEP-2022-08-02', '1.1.0', '1.0', '1.10.2.1', '1.2.3.0',
 *                          '1.2.3-rc1', '1.5.1', '1.10.2-rc1', '1.10.2-rc2']
 * List<String> sortedVersions = new SortSoftwareVersions().sort(versions)
 * println(sortedVersions)
 *
 * @author Ludovic Foltete
 */
@CompileStatic
class SortSoftwareVersions {

    /**
     * Finds the first non-numeric character and uses it as a delimiter
     * to split the string into two parts (before and after the delimiter).
     *
     * @param str The string to split.
     *
     * @return A map with two keys :
     *           - 'numeric' : representing the parts of the string before the
     *             first non-numeric character
     *           - 'alpha' : representing the parts of the string after the
     *             first non-numeric character
     *           If no non-numeric characters are found,
     *           the entire string is returned in the "numeric" part
     */
    Map<String, String> findFirstNonNumericCharAndSplitString(String str) {
        // Compile the regular expression to find non-numeric characters
        Matcher matcher = Pattern.compile('[^\\d]').matcher(str)

        // If no non-numeric characters are found, return str in the numeric part
        if (!matcher.find()) return [numeric:str, alpha:'']

        // Find the index of the first non-numeric character in 'str'
        int index = matcher.start()

        // If the first character is not numeric, return 'str' in the alpha part
        if (index == 0) return [numeric:'', alpha:str]

        // Otherwise, split 'str' into two parts (before and after the first non-numeric character)
        String numPart   = str[0..index - 1]
        String alphaPart = str[index..-1]
        return [numeric:numPart, alpha:alphaPart]
    }

    /**
     * Sorts a list of version in descending order.
     *
     * @param versions A list of version in the format "major.minor.patch..."
     *
     * @return A sorted list of version in descending order
     */
    List<String> sort(List<String> versions) {
        // Redefine the standard 'sort' function with a closure
        versions.sort { a, b ->
            // Extract the version number parts (major, minor...) for each element
            List<String> aParts = a.tokenize('.')
            List<String> bParts = b.tokenize('.')

            // Index of the version number part currently being processed by the while loop
            int i = 0

            // Compare the version number parts one by one
            while (true) {
                // If the loop has reached the end of either list, stop the loop
                if (i >= aParts.size() || i >= bParts.size()) {
                    break
                }

                // Split each part into two sub-parts: a numeric part and an alpha part
                Map<String, String> aPart = findFirstNonNumericCharAndSplitString(aParts[i])
                Map<String, String> bPart = findFirstNonNumericCharAndSplitString(bParts[i])

                // If empty, assign the value 0 to the numeric part,
                // otherwise convert it to an integer
                int    aNumPart   = (aPart.numeric == '') ? 0 : aPart.numeric.toInteger()
                int    bNumPart   = (bPart.numeric == '') ? 0 : bPart.numeric.toInteger()

                // If empty, assign the value '~' to the alpha part, otherwise keep it as is
                // '~' is the last letter in the ASCII table,
                // ensuring that it's sorted alphabetically first
                String aAlphaPart = (aPart.alpha == '') ? '~' : aPart.alpha
                String bAlphaPart = (bPart.alpha == '') ? '~' : bPart.alpha

                // Si If the numeric parts are different, return the result of the numerical comparison
                if (aNumPart != bNumPart) {
                    return bNumPart <=> aNumPart
                }

                // Otherwise, if the alpha parts are different, return the result of the alpha comparison
                if (aAlphaPart != bAlphaPart) {
                    return bAlphaPart <=> aAlphaPart
                }

                // Otherwise, move on to the next version number part
                i++
            }

            // If the versions have been identical so far, compare the number of remaining parts
            return bParts.size() <=> aParts.size()
        }
        // Return the sorted list of versions
        return versions
    }

}
